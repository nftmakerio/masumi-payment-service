// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from '@hey-api/client-axios';
import type {
  GetHealthData,
  GetHealthResponse,
  GetApiKeyStatusData,
  GetApiKeyStatusResponse,
  GetWalletData,
  GetWalletResponse,
  PostWalletData,
  PostWalletResponse,
  DeleteApiKeyData,
  DeleteApiKeyResponse,
  GetApiKeyData,
  GetApiKeyResponse,
  PatchApiKeyData,
  PatchApiKeyResponse,
  PostApiKeyData,
  PostApiKeyResponse,
  GetPaymentData,
  GetPaymentResponse,
  PostPaymentData,
  PostPaymentResponse,
  PostPaymentSubmitResultData,
  PostPaymentSubmitResultResponse,
  PostPaymentAuthorizeRefundData,
  PostPaymentAuthorizeRefundResponse,
  GetPurchaseData,
  GetPurchaseResponse,
  PostPurchaseData,
  PostPurchaseResponse,
  PostPurchaseRequestRefundData,
  PostPurchaseRequestRefundResponse,
  PostPurchaseCancelRefundRequestData,
  PostPurchaseCancelRefundRequestResponse,
  DeleteRegistryData,
  DeleteRegistryResponse,
  GetRegistryData,
  GetRegistryResponse,
  PostRegistryData,
  PostRegistryResponse,
  DeletePaymentSourceData,
  DeletePaymentSourceResponse,
  GetPaymentSourceData,
  GetPaymentSourceResponse,
  PatchPaymentSourceData,
  PatchPaymentSourceResponse,
  PostPaymentSourceData,
  PostPaymentSourceResponse,
  GetPaymentSourceExtendedData,
  GetPaymentSourceExtendedResponse,
  GetUtxosData,
  GetUtxosResponse,
  GetRpcApiKeysData,
  GetRpcApiKeysResponse,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get the status of the API server
 */
export const getHealth = <ThrowOnError extends boolean = false>(
  options?: Options<GetHealthData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetHealthResponse,
    unknown,
    ThrowOnError
  >({
    url: '/health/',
    ...options,
  });
};

/**
 * REQUIRES API KEY Authentication (+READ)
 * Gets api key status
 */
export const getApiKeyStatus = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiKeyStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiKeyStatusResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/api-key-status/',
    ...options,
  });
};

/**
 * REQUIRES API KEY Authentication (+ADMIN)
 * Gets wallet status
 */
export const getWallet = <ThrowOnError extends boolean = false>(
  options: Options<GetWalletData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWalletResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/wallet/',
    ...options,
  });
};

/**
 * REQUIRES API KEY Authentication (+ADMIN)
 * Creates a wallet, it will not be saved in the database, please ensure to remember the mnemonic
 */
export const postWallet = <ThrowOnError extends boolean = false>(
  options?: Options<PostWalletData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostWalletResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/wallet/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * REQUIRES API KEY Authentication (+admin)
 * Removes a API key
 */
export const deleteApiKey = <ThrowOnError extends boolean = false>(
  options?: Options<DeleteApiKeyData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteApiKeyResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/api-key/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * REQUIRES API KEY Authentication (+admin)
 * Gets api key status
 */
export const getApiKey = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiKeyData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiKeyResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/api-key/',
    ...options,
  });
};

/**
 * REQUIRES API KEY Authentication (+admin)
 * Creates a API key
 */
export const patchApiKey = <ThrowOnError extends boolean = false>(
  options?: Options<PatchApiKeyData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    PatchApiKeyResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/api-key/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * REQUIRES API KEY Authentication (+admin)
 * Creates a API key
 */
export const postApiKey = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiKeyData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiKeyResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/api-key/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * REQUIRES API KEY Authentication (+READ)
 * Gets the payment status. It needs to be created first with a POST request.
 */
export const getPayment = <ThrowOnError extends boolean = false>(
  options: Options<GetPaymentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/payment/',
    ...options,
  });
};

/**
 * REQUIRES API KEY Authentication (+PAY)
 * Creates a payment request and identifier. This will check incoming payments in the background.
 */
export const postPayment = <ThrowOnError extends boolean = false>(
  options?: Options<PostPaymentData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/payment/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * REQUIRES API KEY Authentication (+PAY)
 * Completes a payment request. This will collect the funds after the unlock time.
 */
export const postPaymentSubmitResult = <ThrowOnError extends boolean = false>(
  options?: Options<PostPaymentSubmitResultData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostPaymentSubmitResultResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/payment/submit-result',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * REQUIRES API KEY Authentication (+PAY)
 * Authorizes a refund for a payment request. This will stop the right to receive a payment and initiate a refund for the other party.
 */
export const postPaymentAuthorizeRefund = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostPaymentAuthorizeRefundData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostPaymentAuthorizeRefundResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/payment/authorize-refund',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * REQUIRES API KEY Authentication (+READ)
 * Gets the purchase status. It needs to be created first with a POST request.
 */
export const getPurchase = <ThrowOnError extends boolean = false>(
  options: Options<GetPurchaseData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetPurchaseResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/purchase/',
    ...options,
  });
};

/**
 * REQUIRES API KEY Authentication (+PAY)
 * Creates a purchase and pays the seller. This requires funds to be available.
 */
export const postPurchase = <ThrowOnError extends boolean = false>(
  options?: Options<PostPurchaseData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostPurchaseResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/purchase/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * REQUIRES API KEY Authentication (+PAY)
 * Requests a refund for a completed purchase. This will collect the refund after the refund time.
 */
export const postPurchaseRequestRefund = <ThrowOnError extends boolean = false>(
  options?: Options<PostPurchaseRequestRefundData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostPurchaseRequestRefundResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/purchase/request-refund',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * REQUIRES API KEY Authentication (+PAY)
 * Requests a refund for a completed purchase. This will collect the refund after the refund time.
 */
export const postPurchaseCancelRefundRequest = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostPurchaseCancelRefundRequestData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostPurchaseCancelRefundRequestResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/purchase/cancel-refund-request',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * REQUIRES API KEY Authentication (+PAY)
 * Deregisters a agent from the specified registry (Please note that while the command is put on-chain, the transaction is not yet finalized by the blockchain, as designed finality is only eventually reached. If you need certainty, please check status via the registry(GET) or if you require custom logic, the transaction directly using the txHash)
 */
export const deleteRegistry = <ThrowOnError extends boolean = false>(
  options: Options<DeleteRegistryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteRegistryResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/registry/',
    ...options,
  });
};

/**
 * REQUIRES API KEY Authentication (+READ)
 * Gets the agent metadata.
 */
export const getRegistry = <ThrowOnError extends boolean = false>(
  options: Options<GetRegistryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRegistryResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/registry/',
    ...options,
  });
};

/**
 * REQUIRES API KEY Authentication (+PAY)
 * Registers an agent to the registry (Please note that while it it is put on-chain, the transaction is not yet finalized by the blockchain, as designed finality is only eventually reached. If you need certainty, please check status via the registry(GET) or if you require custom logic, the transaction directly using the txHash)
 */
export const postRegistry = <ThrowOnError extends boolean = false>(
  options?: Options<PostRegistryData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostRegistryResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/registry/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * REQUIRES API KEY Authentication (+ADMIN)
 * Deletes a payment source. WARNING will also delete all associated wallets and transactions.
 */
export const deletePaymentSource = <ThrowOnError extends boolean = false>(
  options: Options<DeletePaymentSourceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePaymentSourceResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/payment-source/',
    ...options,
  });
};

/**
 * REQUIRES API KEY Authentication (+READ)
 * Gets the payment source.
 */
export const getPaymentSource = <ThrowOnError extends boolean = false>(
  options?: Options<GetPaymentSourceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetPaymentSourceResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/payment-source/',
    ...options,
  });
};

/**
 * REQUIRES API KEY Authentication (+ADMIN)
 * Updates a payment source.
 */
export const patchPaymentSource = <ThrowOnError extends boolean = false>(
  options?: Options<PatchPaymentSourceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    PatchPaymentSourceResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/payment-source/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * REQUIRES API KEY Authentication (+ADMIN)
 * Creates a payment source.
 */
export const postPaymentSource = <ThrowOnError extends boolean = false>(
  options?: Options<PostPaymentSourceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostPaymentSourceResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/payment-source/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * REQUIRES API KEY Authentication (+ADMIN)
 * Gets the payment contracts including the status.
 */
export const getPaymentSourceExtended = <ThrowOnError extends boolean = false>(
  options?: Options<GetPaymentSourceExtendedData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetPaymentSourceExtendedResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/payment-source-extended/',
    ...options,
  });
};

/**
 * REQUIRES API KEY Authentication (+READ)
 * Gets UTXOs (internal)
 */
export const getUtxos = <ThrowOnError extends boolean = false>(
  options: Options<GetUtxosData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUtxosResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/utxos/',
    ...options,
  });
};

/**
 * REQUIRES API KEY Authentication (+ADMIN)
 * Gets rpc api keys, currently only blockfrost is supported (internal)
 */
export const getRpcApiKeys = <ThrowOnError extends boolean = false>(
  options?: Options<GetRpcApiKeysData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetRpcApiKeysResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'token',
        type: 'apiKey',
      },
    ],
    url: '/rpc-api-keys/',
    ...options,
  });
};
